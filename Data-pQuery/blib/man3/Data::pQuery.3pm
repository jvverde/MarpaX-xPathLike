.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::pQuery 3"
.TH Data::pQuery 3 "2013-07-28" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::pQuery \- a xpath like processor for perl data\-structures (hashes and arrays)!
.SH "VERSION"
.IX Header "VERSION"
Version 0.02
.SH "Why we need another one"
.IX Header "Why we need another one"
There are already some good approaches to xpath syntax, namely the Data::dPath 
and Data::Path. 
Nevertheless we still missing some of powerfull constructions as provided by 
xpath.
.PP
Suppose, for example, we have an array of invoices with Total, Amount and Tax 
and need to check which one does not comply to the rule \*(L"Total = Amount * (1+Tax)\*(R".
.PP
For the data structure below we can easily achieve it with this code:
.PP
.Vb 2
\&        use Data::pQuery;
\&        use Data::Dumper;
\&
\&        ($\e,$,) = (qq|\en|, q|,|);
\&        my $data = Data::pQuery\->data([
\&                {invoice => {
\&                                Amount => 100,
\&                                Tax => 0.2,
\&                                Total => 120
\&                        }
\&                },
\&                {invoice => {
\&                                Amount => 200,
\&                                Tax => 0.15,
\&                                Total => 240
\&                        }       
\&                },
\&                receipt =>{ 
\&                }
\&        ]);
\&
\&        print Dumper $data\->query(q$
\&                //invoice[value(Total) != value(Amount) * (1 + value(Tax))]
\&        $)\->getvalues();
.Ve
.PP
The pQuery syntax is very similar to the xpath but with some minor exceptions,
as showed in examples bellow.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
How to use it.
.PP
.Vb 3
\&        use strict;
\&        use Data::pQuery;
\&        use Data::Dumper;
\&
\&        ($\e,$,) = ("\en",",");
\&        my $d = {
\&                drinks => {
\&                        q|Alcoholic beverage| => \*(Aqnot allowed\*(Aq,
\&                        q|Soft drinks| => [qw|Soda Coke|]
\&                },
\&                food => { 
\&                        fruit => [qw|bananas apples oranges pears|], 
\&                        vegetables  => [qw|potatoes  carrots tomatoes|]
\&                } 
\&        };
\&
\&        my $data = Data::pQuery\->data($d);
\&        my $results = $data\->query(q|/*/*[0]|);
\&        my @values = $results\->getvalues();
\&        print @values;                                  
\&        #Soda,bananas,potatoes
\&
\&        my $ref = $results\->getref();
\&        $$ref = \*(AqTonic\*(Aq;
\&        print $d\->{drinks}\->{q|Soft drinks|}\->[0];      
\&        #Tonic
.Ve
.PP
As we can see above the hashes structures are indexed like an element node 
in xpath and the arrays are indexed by square brackets.
.PP
The result of a query is a object Data::pQuery::Results. This object provide
us with two kind of methods
.IP "getvalues and getvalue" 4
.IX Item "getvalues and getvalue"
.PD 0
.IP "getrefs and getref" 4
.IX Item "getrefs and getref"
.PD
.PP
The first returns a list/scalar with values. The second returns a list/scalar
of references for the matched structures.
.PP
If keys contains key spaces or some special caracters used to construct a pQuery
string we can use quotes to delimite them
.PP
.Vb 4
\&        #keys with spaces or especial characters should be delimited 
\&        #by double quotes 
\&        print $data\->query(q|/drinks/"Alcoholic beverage"|)\->getvalues();
\&        #not allowed
\&
\&        #or by single quotes
\&        print $data\->query(q|/drinks/\*(AqSoft drinks\*(Aq[1]|)\->getvalues();
\&        #Coke
.Ve
.PP
The arrays could be index in several ways, including negative indexes,
ranges, lists and any combination of these.
.PP
.Vb 3
\&        #the .. sequence indexes all array positions
\&        print $data\->query(q|/*/*[..]|)\->getvalues();
\&        #Tonic,Coke,bananas,apples,oranges,pears,potatoes,carrots,tomatoes
\&
\&        print $data\->query(q|*/*[..]|)\->getvalues(); #the leading slash is optional
\&        #Tonic,Coke,bananas,apples,oranges,pears,potatoes,carrots,tomatoes
\&
\&        #negative values indexes the arrays in reverse order. \-1 is the last index
\&        print $data\->query(q|/*/*[\-1]|)\->getvalues();
\&        #Coke,pears,tomatoes
.Ve
.PP
Like xpath the square brackets are used also to specify filters 
(predicates in xpath nomenclature)
.PP
.Vb 3
\&        #Square brackets are also used to specify filters
\&        print $data\->query(q|/*/*[isScalar()]|)\->getvalues();
\&        #not allowed
.Ve
.PP
The variable path length is also defined as in xpath
.PP
.Vb 3
\&        #Like xpath a variable path length is defined by the sequence //
\&        print $data\->query(q|//*[isScalar()]|)\->getvalues();
\&        #not allowed
.Ve
.PP
Unlike xpath in perl we have hashes (which are indexed like element nodes in 
xpath) and arrays (which are indexed by square brackets.) 
If we need to specify a step which could be a hash's key or an array's index 
we can use the sequence **
.PP
.Vb 3
\&        #The step ** select any key or any index, while the step * only select any key
\&        print $data\->query(q|//**[isScalar()]|)\->getvalues();
\&        #not allowed,Tonic,Coke,bananas,apples,oranges,pears,potatoes,carrots,tomatoes
.Ve
.PP
We can use pattern to match strings inside a filter
.PP
.Vb 3
\&        #the filter could be a match between a string expression and a pattern
\&        print $data\->query(q|/*/*[name() ~ "drinks"][..]|)\->getvalues();
\&        #Tonic,Coke
\&
\&        #the same as above (in this particular data\-strucure)
\&        print $data\->query(q|/*/*[name() ~ "drinks"]/**|)\->getvalues();
\&        #Tonic,Coke
.Ve
.PP
Of course, the returned values does not need be scalars (note however, in case 
of not scalares, that the returned values are just references to structures and 
not copy of them. This is normal behaviour in perl, is just a remember)
.PP
.Vb 2
\&        #The returned values does not need to be scalars
\&        print Dumper $data\->query(q|/*/vegetables|)\->getvalues();
.Ve
.PP
The output of above code will be (assuming the \f(CW$data\fR is defined as above)
.PP
.Vb 5
\&        $VAR1 = [
\&                  \*(Aqpotatoes\*(Aq,
\&                  \*(Aqcarrots\*(Aq,
\&                  \*(Aqtomatoes\*(Aq
\&                ];
.Ve
.PP
Again, like in xpath we can specify zero or more filters (predicates) and/or 
combine logical expression with operators 'and' and 'or'
.PP
.Vb 8
\&        #using two filters in sequence and then get the array in reverse order
\&        print $data\->query(q|
\&                //*
\&                [value([\-1]) gt value([0])]
\&                [count([..]) < 4]
\&                [\-1..0]
\&        |)\->getvalues();
\&        #tomatoes,carrots,potatoes
\&
\&        #the same as above but using a logical operation instead of two filters
\&        print $data\->query(q|
\&                //*[value([\-1]) gt value([0]) 
\&                        and count([..]) < 4
\&                ][\-1..0]
\&        |)\->getvalues();
\&        #tomatoes,carrots,potatoes
.Ve
.PP
Similar to xpath a pQuery does not need to be only a path. A function could
also be used as a pQuery
.PP
.Vb 3
\&        #a query could be a function instead of a path
\&        print $data\->query(q|names(/*/*)|)\->getvalues();
\&        #Alcoholic beverage,Soft drinks,fruit,vegetables
\&
\&        #the function \*(Aqnames\*(Aq returns the keys names or indexes
\&        print $data\->query(q|names(//**)|)\->getvalues();
\&        #drinks,Alcoholic beverage,Soft drinks,0,1,food,fruit,0,1,2,3,vegetables,0,1,2
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
It looks for data-structures which match the pQuery expression and returns a list
of matched data-structures.
.PP
Currently, pQuery does not cast anything, so is impossible to compare string 
expressions with mumeric expressions or using numeric operatores. If a function
returns a string it must be compared with string operators against another 
string expression, ex: *[\fIname()\fR eq \*(L"keyname\*(R"].
.PP
Like xpath it is possible to deal with any logical or arithmetic 
expressions, ex: *{count(a) == count(c) / 2 * (1 + count(b)) or d}
.SH "METHODS"
.IX Header "METHODS"
The Data::pQuery just provides two useful methods, compile and data. 
The first is used to complie a pQuery expression and the second is used
to prepare data to be queried.
.SS "Data::pQuery methods"
.IX Subsection "Data::pQuery methods"
\fInew(pQuery)\fR
.IX Subsection "new(pQuery)"
.PP
Used only internally!!! Do nothing;
.PP
\fIcompile(pQueryString)\fR
.IX Subsection "compile(pQueryString)"
.PP
.Vb 1
\&        my $query = Data::pQuery\->compile(\*(Aq*\*(Aq);                         #compile the query
\&        
\&        my @values1 = $query\->data({fruit => \*(Aqbananas\*(Aq})\->getvalues();
\&        # @values1 = (bananas)
\&
\&        my @values2 = $query\->data({
\&                fruit => \*(Aqbananas\*(Aq, 
\&                vegetables => \*(Aqorions\*(Aq
\&        })\->getvalues();
\&        # @values2 = (bananas, orions)
\&
\&        my @values3 = $query\->data({
\&                food => {fruit => \*(Aqbananas\*(Aq}
\&        })\->getvalues();
\&        # @values3 = ({fruit => \*(Aqbananas\*(Aq})
.Ve
.PP
The compile method receives a pQuery string, compiles it and returns a Data::pQuery::Data object.
This is the prefered method to run the same query over several data-structures.
.PP
\fIdata(dataRef)\fR
.IX Subsection "data(dataRef)"
.PP
.Vb 12
\&        my $data = Data::pQuery\->data({
\&                food => {
\&                        fruit => \*(Aqbananas\*(Aq,
\&                        vegetables => \*(Aqunions\*(Aq
\&                },
\&                drinks => {
\&                        wine => \*(AqPorto\*(Aq,
\&                        water => \*(AqEvian\*(Aq
\&                }
\&        });
\&        my @values1 = $data\->query(\*(Aq/*/*\*(Aq)\->getvalues();
\&        print @values1; # Evian,Porto,bananas,unions
\&
\&        my @values2 = $data\->query(\*(Aq/*/wine\*(Aq)\->getvalues();
\&        print @values2; #Porto
\&
\&        #using a filter, to get only first level entry which contains a fruit key
\&        my @values3 = $data\->query(\*(Aq/*{fruit}/*\*(Aq)\->getvalues();
\&        print @values3; #bananas,unions
\&        #using another filter to return only elements which have the value matching 
\&        #a /an/ pattern
\&        my @values4 = $data\->query(\*(Aq/*/*{value() ~ "an"}\*(Aq)\->getvalues();
\&        print @values4;# Evian,bananas
\&
\&        my @values5 = $data\->query(\*(Aq/**{isScalar()}\*(Aq)\->getvalues();
\&        print @values5;#Evian,Porto,bananas,unions
.Ve
.PP
The method data receives a hash or array reference and returns a Data::pQuery::Compile object. 
This is the prefered method to run several query over same data.
.SS "Data::pQuery::Data methods"
.IX Subsection "Data::pQuery::Data methods"
\fIdata(data)\fR
.IX Subsection "data(data)"
.PP
Executes the query over data and returns a Data::pQuery::Results object
.SS "Data::pQuery::Compiler methods"
.IX Subsection "Data::pQuery::Compiler methods"
\fIquery(pQueryString)\fR
.IX Subsection "query(pQueryString)"
.PP
Compile a pQuery string, query the data and returns a Data::pQuery::Results object
.SS "Data::pQuery::Results methods"
.IX Subsection "Data::pQuery::Results methods"
\fI\fIgetrefs()\fI Returns a list os references for each matched data;\fR
.IX Subsection "getrefs() Returns a list os references for each matched data;"
.PP
\fI\fIgetref()\fI Returns a reference for first matched data;\fR
.IX Subsection "getref() Returns a reference for first matched data;"
.PP
\fI\fIgetvalues()\fI Returns a list of values for each matched data;\fR
.IX Subsection "getvalues() Returns a list of values for each matched data;"
.PP
\fI\fIgetvalue()\fI Returns the value of first matched data;\fR
.IX Subsection "getvalue() Returns the value of first matched data;"
.SH "pQuery syntax"
.IX Header "pQuery syntax"
A pQuery expression is a function or a path.
.SS "pQuery Path Expressions"
.IX Subsection "pQuery Path Expressions"
A path is a sequence of steps. A step represent a hash's key name or an array 
index.
.PP
A array index is represented inside square brackets.
.PP
Two successive key names are separated by a slash.
.PP
.Vb 7
\&        my $d = {
\&                food => {
\&                        fruit => q|bananas|,
\&                        vegetables => [qw|potatoes  carrots tomatoes onions|]
\&                }
\&        };
\&        my $data = Data::pQuery\->data($d);
\&
\&        my $food = $data\->query(\*(Aq/food\*(Aq)\->getref();
\&        $$food\->{drinks} = q|no drinks|;
\&
\&        my $fruit = $data\->query(\*(Aq/food/fruit\*(Aq)\->getref();
\&        $$fruit = \*(Aqpears\*(Aq;
\&
\&        my $vegetables = $data\->query(\*(Aq/food/vegetables\*(Aq)\->getref();
\&        push @$$vegetables, q|garlic|;
\&
\&        my $vegetable = $data\->query(\*(Aq/food/vegetables[1]\*(Aq)\->getref();
\&        $$vegetable = q|spinach|;
\&
\&        print Dumper $d;
.Ve
.PP
The above code will produce the result
.PP
.Vb 10
\&        $VAR1 = {
\&                  \*(Aqfood\*(Aq => {
\&                              \*(Aqdrinks\*(Aq => \*(Aqno drinks\*(Aq,
\&                              \*(Aqfruit\*(Aq => \*(Aqpears\*(Aq,
\&                              \*(Aqvegetables\*(Aq => [
\&                                                \*(Aqpotatoes\*(Aq,
\&                                                \*(Aqspinach\*(Aq,
\&                                                \*(Aqtomatoes\*(Aq,
\&                                                \*(Aqonions\*(Aq,
\&                                                \*(Aqgarlic\*(Aq
\&                                              ]
\&                            }
\&                };
.Ve
.PP
A wildcard (*) means any key name and a double wildcard (**) means any key name
or any index nested inside current data-structure.
.PP
.Vb 8
\&        my $d = {
\&                food => {
\&                        fruit => q|bananas|,
\&                        vegetables => [qw|potatoes  carrots|]
\&                },
\&                wine => \*(AqPorto\*(Aq
\&        };
\&        my $data = Data::pQuery\->data($d);
\&
\&        my @all = $data\->query(\*(Aq*\*(Aq)\->getvalues();
\&        print "all\et", Dumper \e@all;
\&
\&        my @deepall = $data\->query(\*(Aq**\*(Aq)\->getvalues();
\&        print "deepall\et", Dumper \e@deepall;
.Ve
.PP
The above code will produce the following result
.PP
.Vb 10
\&        all     $VAR1 = [
\&                  {
\&                    \*(Aqfruit\*(Aq => \*(Aqbananas\*(Aq,
\&                    \*(Aqvegetables\*(Aq => [
\&                                      \*(Aqpotatoes\*(Aq,
\&                                      \*(Aqcarrots\*(Aq
\&                                    ]
\&                  },
\&                  \*(AqPorto\*(Aq
\&                ];
\&        deepall $VAR1 = [
\&                  {
\&                    \*(Aqfruit\*(Aq => \*(Aqbananas\*(Aq,
\&                    \*(Aqvegetables\*(Aq => [
\&                                      \*(Aqpotatoes\*(Aq,
\&                                      \*(Aqcarrots\*(Aq
\&                                    ]
\&                  },
\&                  \*(Aqbananas\*(Aq,
\&                  [
\&                    \*(Aqpotatoes\*(Aq,
\&                    \*(Aqcarrots\*(Aq
\&                  ],
\&                  \*(Aqpotatoes\*(Aq,
\&                  \*(Aqcarrots\*(Aq,
\&                  \*(AqPorto\*(Aq
\&                ];
.Ve
.PP
The arrays can be index by one or more indexes separated by a comma.
.PP
The indexes can be negative which will be interpreted as reverse index. 
The \-1 indexes last array position, \-2 indexes second last and so one.
.PP
It's possible to index a range by specifying the limits separated by a 
dotdot sequence. 
If first limit is greater than last the result will be returned in reverse 
order. 
If left limit is omitted it means start from first index.
If right limit is omitted it means stop on last index.
Its' also possible to index any combination of ranges and indexes separated
by commas
.PP
.Vb 4
\&        my $data = Data::pQuery\->data({
\&                fruit => [qw|bananas apples oranges pears|],
\&                vegetables => [qw|potatoes carrots tomatoes onions|]
\&        });
\&
\&        print $data\->query(\*(Aq*[2]\*(Aq)\->getvalues();            #oranges,tomatoes
\&        print $data\->query(\*(Aq*[\-1]\*(Aq)\->getvalues();           #pears,onions
\&        print $data\->query(\*(Aqfruit[0,2]\*(Aq)\->getvalues();      #bananas,oranges
\&        print $data\->query(\*(Aqfruit[2,0]\*(Aq)\->getvalues();      #oranges,bananas
\&        print $data\->query(\*(Aqfruit[2..]\*(Aq)\->getvalues();      #oranges,pears
\&        print $data\->query(\*(Aqfruit[..1]\*(Aq)\->getvalues();      #bananas,apples
\&        print $data\->query(\*(Aqfruit[1..2]\*(Aq)\->getvalues();     #apples,oranges
\&        print $data\->query(\*(Aqfruit[2..1]\*(Aq)\->getvalues();     #oranges,apples
\&        print $data\->query(\*(Aqfruit[..]\*(Aq)\->getvalues();      #bananas,apples,oranges,pears
\&        print $data\->query(\*(Aqfruit[1..\-1]\*(Aq)\->getvalues();    #apples,oranges,pears
\&        print $data\->query(\*(Aqfruit[\-1..1]\*(Aq)\->getvalues();    #pears,oranges,apples
\&        print $data\->query(\*(Aqfruit[\-1..]\*(Aq)\->getvalues();     #pears
\&        print $data\->query(\*(Aqfruit[3..9]\*(Aq)\->getvalues();     #pears
\&        print $data\->query(\*(Aqfruit[\-1..9]\*(Aq)\->getvalues();    #pears
\&        print $data\->query(\*(Aqfruit[\-1..\-9]\*(Aq)\->getvalues(); #pears,oranges,apples,bananas 
\&        print $data\->query(\*(Aqfruit[0,2..3]\*(Aq)\->getvalues();   #bananas,oranges,pears 
\&        print $data\->query(\*(Aqfruit[..1,3..]\*(Aq)\->getvalues();  #bananas,apples,pears
.Ve
.PP
Every step could be filter out by a logical expression inside a curly bracket.
.PP
A logical expression is any combination of comparison expressions, path 
expressions, or logical functions, combined with operators 'and' and 'or'
.PP
\fIComparison expressions\fR
.IX Subsection "Comparison expressions"
.PP
A comparison expression can compare two strings expressions or two numeric 
expressions. Its impossible to compare a string expression with a numeric 
expression. Nothing is cast! It is also impossible to use numeric comparison
operator to compare strings expressions.
.PP
Numeric comparison operators
.IX Subsection "Numeric comparison operators"
.IP "NumericExpr < NumericExpr" 8
.IX Item "NumericExpr < NumericExpr"
.PD 0
.IP "NumericExpr <= NumericExpr" 8
.IX Item "NumericExpr <= NumericExpr"
.IP "NumericExpr > NumericExpr" 8
.IX Item "NumericExpr > NumericExpr"
.IP "NumericExpr >= NumericExpr" 8
.IX Item "NumericExpr >= NumericExpr"
.IP "NumericExpr == NumericExpr" 8
.IX Item "NumericExpr == NumericExpr"
.IP "NumericExpr != NumericExpr" 8
.IX Item "NumericExpr != NumericExpr"
.PD
.PP
String comparison operators
.IX Subsection "String comparison operators"
.IP "StringExpr lt StringExpr" 8
.IX Item "StringExpr lt StringExpr"
.PD 0
.IP "StringExpr le StringExpr" 8
.IX Item "StringExpr le StringExpr"
.IP "StringExpr gt StringExpr" 8
.IX Item "StringExpr gt StringExpr"
.IP "StringExpr ge StringExpr" 8
.IX Item "StringExpr ge StringExpr"
.IP "StringExpr ~ RegularExpr" 8
.IX Item "StringExpr ~ RegularExpr"
.IP "StringExpr !~ RegularExpr" 8
.IX Item "StringExpr !~ RegularExpr"
.IP "StringExpr eq StringExpr" 8
.IX Item "StringExpr eq StringExpr"
.IP "StringExpr ne StringExpr" 8
.IX Item "StringExpr ne StringExpr"
.PD
.SS "pQuery Functions"
.IX Subsection "pQuery Functions"
Any function can be used as query  and some of them can also
be used as part of a numeric or string expression inside a filter.
.PP
Currently only the following function are supported
.IP "count(pathExpr)" 8
.IX Item "count(pathExpr)"
Counts the number of matched data-structures. The count can be used inside
a filter as part of a Numeric expression. Ex: *{count(a/b) == 3}
.IP "exists(pathExpr)" 8
.IX Item "exists(pathExpr)"
Exists is similar to count but returns a boolean expression instead of a 
numeric value. Ex: *{exists(a/b)}
.IP "not(pathExpr)" 8
.IX Item "not(pathExpr)"
Is a boolean function. Ex: *{not(exists(a/b))}
.IP "names(pathExpr?)" 8
.IX Item "names(pathExpr?)"
Returns a list of names of matched data-structures. 
If pathExpr is omitted it returns the name of current data-structure. 
If the data-structure is a hash entry it returns the keyname.
If the data-structure is an array entry it returns the index.
PathExpr is any valid pQuery path expression. 
If it starts with a slash it means an absolute path, otherwise it is a 
path relative to the current data-structure.
A empty list will be returned if nothing matches.
.IP "name(pathExpr?)" 8
.IX Item "name(pathExpr?)"
name is a particular case of names which just returns the name of first matched 
data-structure or undef if nothing matches.
.Sp
This function can be part of a string expression inside a filter
.IP "values(pathExpr?)" 8
.IX Item "values(pathExpr?)"
Like names but returns the values instead of keys or indexs. 
The same rules apllies for the optional pathExpr argument.
.IP "value(pathExpr?)" 8
.IX Item "value(pathExpr?)"
Returns the value of first matched data-structure or undef in none matches.
If pathExpr is omitted it returns the value of current data-structure.
.Sp
This function can be part of a string expression or a numeric expression inside a filter
.IP "isXXXX(pathExpr?)" 8
.IX Item "isXXXX(pathExpr?)"
Thet group of functions isRef, isScalar, isHash, isArray and isCode returns true
is the matched data-structure is a structure of correspondent type.
.Sp
If pathExpr is omitted it applies to current data-structure. 
If pathExpr evaluates to more than one data-strucures it returns the result of a 
internal logical or operation. For instance, the pQuery expression a{isScalar(*)} 
returns the data-structure referenced by the 'a' keyname if it contains at least 
one keyname associated with a scalar value.
.Sp
These functions can be used inside a filter as a boolean expression.
.SS "pQuery grammar"
.IX Subsection "pQuery grammar"
Marpa::R2 is used to parse the pQuery expression. Bellow is the complete grammar
.PP
.Vb 1
\&        :start ::= Start
\&
\&        Start ::= OperExp                             
\&
\&        OperExp ::=
\&          PathExpr                                    
\&          |Function                                   
\&
\&        Function ::=
\&          NumericFunction                             
\&          | StringFunction                            
\&          | ListFunction                              
\&
\&        PathExpr ::=
\&          absolutePath                                
\&          | relativePath                              
\&          | PathExpr \*(Aq|\*(Aq PathExpr                     
\&
\&        relativePath ::=  
\&          stepPath                                    
\&          | indexPath                                 
\&
\&        absolutePath ::=  
\&          \*(Aq/\*(Aq stepPath                                
\&          | indexPath                                 
\&
\&        stepPath ::=
\&          step Filter absolutePath                    
\&          | step Filter                               
\&          | step absolutePath                         
\&          | step                                      
\&
\&        step ::= 
\&          keyname                                     
\&          | wildcard                                  
\&          | dwildcard                                 
\&          | \*(Aq..\*(Aq                                      
\&
\&        indexPath ::=
\&          IndexArray Filter absolutePath              
\&          | IndexArray Filter                         
\&          | IndexArray absolutePath                   
\&          | IndexArray                                
\&
\&
\&        IndexArray ::=  \*(Aq[\*(Aq IndexExprs \*(Aq]\*(Aq            
\&
\&
\&        IndexExprs ::= IndexExpr+       separator => <comma>
\&
\&        IndexExpr ::=
\&          IntExpr                                     
\&          | rangeExpr                                 
\&
\&        rangeExpr ::= 
\&          IntExpr \*(Aq..\*(Aq IntExpr                        
\&          |IntExpr \*(Aq..\*(Aq                               
\&          | \*(Aq..\*(Aq IntExpr                              
\&          | \*(Aq..\*(Aq                                      
\&
\&
\&        Filter ::=  
\&          \*(Aq{\*(Aq LogicalExpr \*(Aq}\*(Aq                         
\&          | \*(Aq{\*(Aq LogicalExpr \*(Aq}\*(Aq Filter                
\&
\&        IntExpr ::=
\&          ArithmeticIntExpr                           
\&
\&         ArithmeticIntExpr ::=
\&          INT                                         
\&          | IntegerFunction                           
\&          | \*(Aq(\*(Aq IntExpr \*(Aq)\*(Aq                           
\&          || \*(Aq\-\*(Aq ArithmeticIntExpr                    
\&           | \*(Aq+\*(Aq ArithmeticIntExpr                    
\&          || ArithmeticIntExpr \*(Aq*\*(Aq ArithmeticIntExpr  
\&           | ArithmeticIntExpr \*(Aq/\*(Aq ArithmeticIntExpr  
\&           | ArithmeticIntExpr \*(Aq%\*(Aq ArithmeticIntExpr  
\&          || ArithmeticIntExpr \*(Aq+\*(Aq ArithmeticIntExpr  
\&           | ArithmeticIntExpr \*(Aq\-\*(Aq ArithmeticIntExpr  
\&
\&
\&        NumericExpr ::=
\&          ArithmeticExpr                              
\&
\&        ArithmeticExpr ::=
\&          NUMBER                                      
\&          | NumericFunction                           
\&          | \*(Aq(\*(Aq NumericExpr \*(Aq)\*(Aq                       
\&          || \*(Aq\-\*(Aq ArithmeticExpr                       
\&           | \*(Aq+\*(Aq ArithmeticExpr                       
\&          || ArithmeticExpr \*(Aq*\*(Aq ArithmeticExpr        
\&           | ArithmeticExpr \*(Aq/\*(Aq ArithmeticExpr        
\&           | ArithmeticExpr \*(Aq%\*(Aq ArithmeticExpr        
\&          || ArithmeticExpr \*(Aq+\*(Aq ArithmeticExpr        
\&           | ArithmeticExpr \*(Aq\-\*(Aq ArithmeticExpr        
\&
\&        LogicalExpr ::=
\&          compareExpr                                 
\&          |LogicalFunction                            
\&
\&        compareExpr ::= 
\&          PathExpr                                    
\&          || NumericExpr \*(Aq<\*(Aq NumericExpr              
\&           | NumericExpr \*(Aq<=\*(Aq NumericExpr             
\&           | NumericExpr \*(Aq>\*(Aq NumericExpr              
\&           | NumericExpr \*(Aq>=\*(Aq NumericExpr             
\&           | StringExpr \*(Aqlt\*(Aq StringExpr               
\&           | StringExpr \*(Aqle\*(Aq StringExpr               
\&           | StringExpr \*(Aqgt\*(Aq StringExpr               
\&           | StringExpr \*(Aqge\*(Aq StringExpr               
\&           | StringExpr \*(Aq~\*(Aq RegularExpr               
\&           | StringExpr \*(Aq!~\*(Aq RegularExpr              
\&           | NumericExpr \*(Aq==\*(Aq NumericExpr             
\&           | NumericExpr \*(Aq!=\*(Aq NumericExpr             
\&           | StringExpr \*(Aqeq\*(Aq StringExpr               
\&           | StringExpr \*(Aqne\*(Aq StringExpr               
\&          || compareExpr \*(Aqand\*(Aq LogicalExpr            
\&          || compareExpr \*(Aqor\*(Aq LogicalExpr             
\&
\&        #operator match, not match, in, intersect and union are missing
\&
\&        StringExpr ::=
\&          STRING                                      
\&          | StringFunction                            
\&          || StringExpr \*(Aq||\*(Aq StringExpr               
\&
\&
\&        RegularExpr 
\&          ::= STRING                                  
\&
\&        LogicalFunction ::=
\&          \*(Aqnot\*(Aq \*(Aq(\*(Aq LogicalExpr \*(Aq)\*(Aq                   
\&          | \*(AqisRef\*(Aq \*(Aq(\*(Aq  PathArgs  \*(Aq)\*(Aq                
\&          | \*(AqisScalar\*(Aq \*(Aq(\*(Aq PathArgs \*(Aq)\*(Aq               
\&          | \*(AqisArray\*(Aq \*(Aq(\*(Aq PathArgs \*(Aq)\*(Aq                
\&          | \*(AqisHash\*(Aq \*(Aq(\*(Aq PathArgs \*(Aq)\*(Aq                 
\&          | \*(AqisCode\*(Aq \*(Aq(\*(Aq PathArgs \*(Aq)\*(Aq                 
\&
\&        StringFunction ::=
\&          NameFunction                                
\&          | ValueFunction                             
\&
\&        NameFunction ::= 
\&          \*(Aqname\*(Aq \*(Aq(\*(Aq PathArgs \*(Aq)\*(Aq                     
\&
\&        PathArgs ::= 
\&          PathExpr                                    
\&          |EMPTY                                      
\&
\&        EMPTY ::=
\&
\&        ValueFunction ::= 
\&          \*(Aqvalue\*(Aq \*(Aq(\*(Aq PathArgs \*(Aq)\*(Aq                    
\&
\&        CountFunction ::= 
\&          \*(Aqcount\*(Aq \*(Aq(\*(Aq PathExpr \*(Aq)\*(Aq                    
\&
\&        SumFunction ::= 
\&          \*(Aqsum\*(Aq \*(Aq(\*(Aq PathExpr \*(Aq)\*(Aq                      
\&
\&        SumProductFunction ::= 
\&          \*(Aqsumproduct\*(Aq \*(Aq(\*(Aq PathExpr \*(Aq,\*(Aq PathExpr \*(Aq)\*(Aq  
\&
\&        NumericFunction ::=
\&          CountFunction                               
\&          |ValueFunction                              
\&          |SumFunction                                
\&          |SumProductFunction                         
\&
\&        IntegerFunction ::=
\&          CountFunction                               
\&
\&        ListFunction ::=
\&          \*(Aqnames\*(Aq \*(Aq(\*(Aq PathArgs \*(Aq)\*(Aq                    
\&          | \*(Aqvalues\*(Aq \*(Aq(\*(Aq PathArgs \*(Aq)\*(Aq                 
\&
\&
\&         NUMBER ::= 
\&          unumber                                     
\&          | \*(Aq\-\*(Aq unumber                               
\&          | \*(Aq+\*(Aq unumber                               
\&
\&        unumber 
\&          ~ uint
\&          | uint frac
\&          | uint exp
\&          | uint frac exp
\&         
\&        uint            
\&          ~ digits
\&
\&        digits 
\&          ~ [\ed]+
\&         
\&        frac
\&          ~ \*(Aq.\*(Aq digits
\&         
\&        exp
\&          ~ e digits
\&         
\&        e
\&          ~ \*(Aqe\*(Aq
\&          | \*(Aqe+\*(Aq
\&          | \*(Aqe\-\*(Aq
\&          | \*(AqE\*(Aq
\&          | \*(AqE+\*(Aq
\&          | \*(AqE\-\*(Aq
\&
\&        INT ::= 
\&          UINT                                    
\&          | \*(Aq+\*(Aq UINT                              
\&          | \*(Aq\-\*(Aq UINT                              
\&
\&        UINT
\&          ~digits
\&
\&        STRING ::= 
\&          double_quoted                               
\&          | single_quoted                             
\&
\&
\&        single_quoted        
\&          ~ [\*(Aq\*(Aq] single_quoted_chars [\*(Aq\*(Aq]
\&
\&        single_quoted_chars      
\&          ~ single_quoted_char*
\&         
\&        single_quoted_char  
\&          ~ [^\*(Aq]
\&          | \*(Aq\e\*(Aq [\*(Aq]
\&
\&        double_quoted        
\&          ~ ["] double_quoted_chars ["]
\&
\&        double_quoted_chars      
\&          ~ double_quoted_char*
\&         
\&        double_quoted_char  
\&          ~ [^"]
\&          | \*(Aq\e\*(Aq \*(Aq"\*(Aq
\&
\&        wildcard 
\&          ~ [*]
\&
\&        dwildcard 
\&          ~ [*][*]
\&
\&        keyname ::= 
\&          token                                       
\&          | STRING                                    
\&
\&        token ~ [^./*,\*(Aq"|\es\e]\e[\e(\e)\e{\e}\e\e+\-]+
\&
\&
\&        :discard 
\&          ~ WS
\&
\&        WS 
\&          ~ [\es]+
\&
\&        comma 
\&          ~ \*(Aq,\*(Aq
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Isidro Vila Verde, \f(CW\*(C`<jvverde at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Send email to \f(CW\*(C`<jvverde at gmail.com>\*(C'\fR with subject Data::pQuery
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Data::pQuery
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Isidro Vila Verde.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE\s0 \s-1PACKAGE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \s-1BY\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0
\&\s-1AND\s0 \s-1CONTRIBUTORS\s0 "\s-1AS\s0 \s-1IS\s0' \s-1AND\s0 \s-1WITHOUT\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0.
\&\s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0, \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0
\&\s-1PURPOSE\s0, \s-1OR\s0 NON-INFRINGEMENT \s-1ARE\s0 \s-1DISCLAIMED\s0 \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0
\&\s-1YOUR\s0 \s-1LOCAL\s0 \s-1LAW\s0. \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1LAW\s0, \s-1NO\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0 \s-1OR\s0
\&\s-1CONTRIBUTOR\s0 \s-1WILL\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1INCIDENTAL\s0, \s-1OR\s0
\&\s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THE\s0 \s-1PACKAGE\s0,
\&\s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0 \s-1DAMAGE\s0.
